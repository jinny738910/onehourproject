name: Backend CI Pipeline (Spring Boot Maven)

# 1. 언제 실행할지 정의: main 또는 master 브랜치에 코드가 푸시되거나, Pull Request가 발생했을 때
on:
  push:
    branches:
      - main
      - master # master 브랜치 추가
  pull_request:
    branches:
      - main
      - master # master 브랜치 추가

# 2. 파이프라인을 실행할 Job 목록
jobs:
  build_and_push: # Job 이름을 build_and_push로 변경하여 Docker 이미지 푸시까지 포함
    # 실행 환경 설정 (GitHub에서 제공하는 최신 우분투 서버)
    runs-on: ubuntu-latest

    # Job에서 수행할 단계(Step)들
    steps:
      # 1. 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v4
        
      # 2. Java 환경 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          # Maven이 사용할 캐시를 설정하여 종속성 다운로드 시간을 줄입니다.
          cache: 'maven' 

      # 3. 단위 테스트 실행 및 코드 빌드
      - name: Build and Run Tests
        run: mvn clean package -DskipTests=false

      # --- [ CD를 위한 추가 단계 시작 ] ---

      # 4. Docker 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # GitHub Secrets에서 가져옴
          password: ${{ secrets.DOCKER_PASSWORD }} # GitHub Secrets에서 가져옴

      # 5. Docker 이미지 빌드 및 푸시
      # 브랜치 이름과 커밋 SHA를 사용하여 고유한 태그를 생성합니다.
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          # 이미지 태그: 사용자 이름/앱 이름:태그 (예: jinny738910/my-backend-app:v1.0.1)
          tags: ${{ secrets.DOCKER_USERNAME }}/my-backend-app:${{ github.sha }}
          push: true # <--- 이 부분이 CI 단계와 달리 'push: true'로 설정됩니다.

      # 6. (선택적) 빌드 아티팩트 저장 - 이제 Docker 이미지로 대체되었으므로 삭제 가능

  # ----------------------------------------------------------------
  # 실제 배포 Job 추가 (AWS 환경에 맞게 수정)
  # ----------------------------------------------------------------
  deploy_to_staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: [build_and_push] # build_and_push Job이 성공해야 실행됩니다.
    
    # main 브랜치에 푸시되었을 때만 배포 실행 (Pull Request 제외)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' 
    
    steps:
      # (1) 클라우드 인증 설정 (AWS)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # GitHub Secret 필요
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # GitHub Secret 필요
          aws-region: ${{ secrets.AWS_REGION }} # GitHub Secret 또는 리전 코드(예: ap-northeast-2) 직접 입력

      # (2) 배포 명령 실행 (예: AWS ECS 서비스 업데이트)
      - name: Deploy to AWS ECS (Staging)
        env:
          IMAGE_TAG: ${{ secrets.DOCKER_USERNAME }}/my-backend-app:${{ github.sha }}
          ECS_CLUSTER_NAME: 'your-ecs-cluster' # 실제 ECS 클러스터 이름으로 변경 필요
          ECS_SERVICE_NAME: 'your-ecs-service' # 실제 ECS 서비스 이름으로 변경 필요
        run: |
          echo "Starting deployment to AWS ECS Service: $ECS_SERVICE_NAME"
          
          # AWS ECS는 Task Definition의 이미지를 업데이트해야 합니다.
          # 이 명령어는 ECS 서비스에 강제로 새 배포를 시작하여, 최신 Task Definition을 사용하게 합니다.
          # (사전에 최신 이미지 태그를 반영한 Task Definition이 준비되어 있다고 가정합니다.)
          aws ecs update-service \
            --cluster $ECS_CLUSTER_NAME \
            --service $ECS_SERVICE_NAME \
            --force-new-deployment
            
          echo "Deployment process initiated for image: $IMAGE_TAG"


      - name: Automated Health Check
        run: echo "Run automated integration tests against the staging URL here"
